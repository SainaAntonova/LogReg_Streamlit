import streamlit as st
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(file):
    return pd.read_csv(file)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
def train_model(X, y, normalization_method):
    if normalization_method == 'StandardScaler':
        scaler = StandardScaler()
    elif normalization_method == 'MinMaxScaler':
        scaler = MinMaxScaler()
    else:
        scaler = None
    
    if scaler is not None:
        X_normalized = scaler.fit_transform(X)
    else:
        X_normalized = X
        
    model = LogisticRegression(max_iter=1000)
    model.fit(X_normalized, y)
    return model

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Å–æ–≤
def show_weights(feature_names, weights):
    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:")
    for feature, weight in zip(feature_names, weights[0]):
        st.write(f"{feature}: {weight}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ scatter plot
def show_scatter_plot_with_decision_boundary(data, x_column, y_column, target_column, model):
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(data=data, x=x_column, y=y_column, hue=target_column, palette='coolwarm', ax=ax, marker='*', s=250)
    betas = model.coef_[0]
    beta_0 = model.intercept_[0]
    beta_1, beta_2 = betas[0], betas[1]
    x_values = np.array(ax.get_xlim())
    y_values = (- beta_0 - beta_1 * x_values) / beta_2
    ax.plot(x_values, y_values, linestyle='--', color='black', label='Decision Boundary')

    plt.title(f"Scatter plot: {x_column} vs {y_column}")
    plt.xlabel(x_column)
    plt.ylabel(y_column)
    st.pyplot(fig)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def normalize_data(X, method):
    if method == "StandardScaler":
        scaler = StandardScaler()
    elif method == "MinMaxScaler":
        scaler = MinMaxScaler()
    else:
        return X
    return scaler.fit_transform(X)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    
    
    #st.title("–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
    st.markdown(
        """
        <div style="background-color:#f0f0f0;padding:10px;border-radius:10px;">
            <h1 style="color:#333;text-align:center;">üìä –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è üìà</h1>
        </div>
        """,
        unsafe_allow_html=True
    )


    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ CSV
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª CSV", type="csv")
    if uploaded_file is not None:
        data = load_data(uploaded_file)
        st.write("–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        st.write(data.head())

        # –í—ã–±–æ—Ä —Ñ–∏—á–µ–π –∏ —Ç–∞—Ä–≥–µ—Ç–∞
        selected_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–∏—á–µ–π (X)", data.columns)
        target_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞ (y)", data.columns)
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        normalization_method = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏", ['StandardScaler', 'MinMaxScaler', '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ!'])

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
        if normalization_method != '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ!':
            columns_to_normalize = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏", selected_columns)
            data_to_normalize = data[columns_to_normalize]
            if normalization_method == 'StandardScaler':
                scaler = StandardScaler()
            elif normalization_method == 'MinMaxScaler':
                scaler = MinMaxScaler()
            data_normalized = scaler.fit_transform(data_to_normalize)
            data[columns_to_normalize] = data_normalized
        
        X = data[selected_columns]
        y = data[target_column]

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = train_model(X, y, normalization_method)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        show_weights(selected_columns, model.coef_)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ scatter plot —Å —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π –ø—Ä—è–º–æ–π
        if len(selected_columns) >= 2:
            x_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Å–∏ X", selected_columns)
            y_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Å–∏ Y", selected_columns)
            show_scatter_plot_with_decision_boundary(data, x_column, y_column, target_column, model)
        st.balloons()
        st.success("–£—Ä–∞! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º! üöÄ")
        st.markdown('<img src="https://media1.giphy.com/media/1ofR3QioNy264/giphy.gif">', unsafe_allow_html=True)

if __name__ == "__main__":
    main()